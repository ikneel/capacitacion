package com.ex.personas.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ex.personas.dao.PersonasDao;
import com.ex.personas.entidad.Personas;
import com.ex.personas.respuesta.Respuesta;

@Service
public class PersonasService implements MetodosPersona{
	@Autowired
	PersonasDao dao;
	@Override
	public Respuesta guardar(Personas persona) {
	    Respuesta rs = new Respuesta();
	    
	   
	    if (persona.getEdad() < 18) {
	        rs.setMensaje("La persona no es mayor de edad por lo que no se puede registrar");
	        rs.setSucces(false);
	        rs.setObj(persona);
	        return rs;
	    }
	    
	    
	    if (dao.existsById(persona.getCurp())) {
	        rs.setMensaje("La persona no se registró porque su CURP ya está registrado");
	        rs.setSucces(false);
	        rs.setObj(persona);
	        return rs;
	    }
	    
	    dao.save(persona);
	    rs.setMensaje("La persona se ha registrado");
	    rs.setSucces(true);
	    rs.setObj(persona);
	    return rs;
	}


	@Override
	public Respuesta editar(Personas persona) {
		Respuesta rs = new Respuesta();
		if(dao.existsById(persona.getCurp())) {
			dao.save(persona);
			rs.setMensaje("La persona ha sido editada");
			rs.setSucces(true);
			rs.setObj(persona);
		}else {
			rs.setMensaje("La persona que tratas de editar no existe");
			rs.setSucces(false);
			rs.setObj(null);
		}	
		return rs;
		
	}

	@Override
	public Respuesta eliminar(Personas persona) {
		Respuesta rs = new Respuesta();
		if(dao.existsById(persona.getCurp())) {
			rs.setObj(dao.findById(persona.getCurp()));
			dao.delete(persona);
			rs.setMensaje("La persona ha sido eliminada");
			rs.setSucces(true);
			return rs;
		}else {
			rs.setMensaje("La persona que tratas de eliminar no existe");
			rs.setSucces(false);
			rs.setObj(null);
		}
		return rs;
		
	}

	@Override
	public Respuesta buscar(Personas persona) {
		Respuesta rs = new Respuesta();
		persona = dao.findById(persona.getCurp()).orElse(null);
		if(persona == null) {
			rs.setMensaje("La persona no esta registrada");
			rs.setSucces(false);
			rs.setObj(null);
			return rs; 
		}else {
			rs.setMensaje("La persona ha sido encontrada");
			rs.setSucces(true);
			rs.setObj(persona);
			return rs;
		}
	}

	@Override
	public Respuesta mostrar() {
		Respuesta rs = new Respuesta();
		List<Personas> listaP = (List<Personas>) dao.findAll();
		if(listaP.isEmpty()) {
			rs.setMensaje("No hay personas que mostrar");
			rs.setSucces(false);
			rs.setObj(null);
			return rs;
		}else {
			rs.setMensaje("Las personas registradas son las siguientes:");
			rs.setSucces(true);
			rs.setObj(dao.findAll());
			return rs;
		}
	}

	@Override
	public Respuesta mostrarViejos() {
		Respuesta rs = new Respuesta();
		List<Personas> listap = (List<Personas>) dao.findAll();
		List<Personas> listap_aux = new ArrayList<>();
		if (listap.isEmpty()) {
			rs.setMensaje("No hay personas que mostrar");
			rs.setSucces(false);
			rs.setObj(null);
			return rs;
		}else {
			for(Personas p : listap) {
				if(p.getEdad() > 55) {
					listap_aux.add(p);
				}
			}
			rs.setMensaje("Las personas mayores son las siguientes: ");
			rs.setSucces(true);
			rs.setObj(listap_aux);
			return rs;
			
		}
	}

	@Override
	public Respuesta mostrarGenero(String genero) {
		Respuesta rs = new Respuesta();
		List<Personas> listap = (List<Personas>) dao.findAll();
		List<Personas> listap_aux = new ArrayList<>();
		
		for(Personas p : listap) {
			if(p.getGenero().equalsIgnoreCase(genero)) {
				listap_aux.add(p);
			}
		}
		rs.setMensaje("Las personas del genero " + genero + " son: ");
		rs.setSucces(true);
		rs.setObj(listap_aux);
		return rs;
	}

	@Override
	public Respuesta mostrarCiudad() {
		Respuesta rs = new Respuesta();
		List<Personas> listap = (List<Personas>) dao.findAll();
		
		String ciudadMenosPersonas =" ";
		Integer personas = 0;
		Integer menosPersonas = 50000;
		
		for(Personas p : listap) {
			for(Personas p2 : listap) {
				if(p.getCiudad().equalsIgnoreCase(p2.getCiudad())) {
					personas++;
				}
				if(personas < menosPersonas) {
					menosPersonas = personas;
					ciudadMenosPersonas = p.getCiudad();
				}
			}
			personas = 0;
		}
		rs.setMensaje("La ciudad con menos personas es: " + ciudadMenosPersonas);
		rs.setSucces(true);
		rs.setObj(menosPersonas);
		return rs;
	}

	@Override
	public Respuesta calcularPeso() {
		Respuesta rs = new Respuesta();
		List<Personas> listap = (List<Personas>) dao.findAll();
		Integer pesoTotal = 0;
		Integer promedioPeso = 0;
		
		for(Personas p : listap) {
			pesoTotal += p.getPeso();
		}
		promedioPeso = pesoTotal / listap.size();
		rs.setMensaje("EL peso promedio de las personas registradas es");
		rs.setSucces(true);
		rs.setObj(promedioPeso);
		return rs;
		
	}

	@Override
	public Respuesta buscarCiudadCp(String ciudad, String codigoPostal) {
		Respuesta rs = new Respuesta();
		List<Personas> listap = (List<Personas>) dao.findAll();
		List<Personas> listap_aux = new ArrayList<>();
		
		for(Personas p : listap) {
			if(p.getCiudad().equalsIgnoreCase(ciudad) && p.getCodigoPostal().equalsIgnoreCase(codigoPostal)) {
				listap_aux.add(p);
			}
		}
		
		rs.setMensaje("Las personas con la ciudad y codigo postal ingresados son:");
		rs.setSucces(true);
		rs.setObj(listap_aux);
		return rs;
	}

	@Override
	public Respuesta buscarNombreApellidos(String apellidop, String apellidom) {
		// TODO Auto-generated method stub
		return null;
	}

}
